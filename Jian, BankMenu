/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package banking;

import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author jian
 */
public class Menu extends javax.swing.JFrame {

private HashMap<String, Double> balances;
 private String username;
    /**
     * Creates new form Menu
     */
    public Menu() {
        
        initComponents();
    }
  public void setBalances(HashMap<String, Double> balances) {
        this.balances = balances;
    }
    public Menu(String username) {
    this.username = username;
    initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        view = new javax.swing.JButton();
        Deposit = new javax.swing.JButton();
        Transfer = new javax.swing.JButton();
        Withraw = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        view.setText("View Balance");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        Deposit.setText("Deposit");
        Deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositActionPerformed(evt);
            }
        });

        Transfer.setText("Transfer Funds");
        Transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferActionPerformed(evt);
            }
        });

        Withraw.setText("Withraw");
        Withraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithrawActionPerformed(evt);
            }
        });

        Exit.setText("Exit and log out");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 102, 0));
        jLabel2.setFont(new java.awt.Font("Impact", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("PH Bank");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 90));
        jLabel2.setMinimumSize(new java.awt.Dimension(30, 26));
        jLabel2.setPreferredSize(new java.awt.Dimension(33, 16));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Withraw, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Exit)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(202, 202, 202))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Withraw, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Exit)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {                                     
         // TODO add your handling code here:
     
       // Check if the username exists in the balances HashMap
        if (balances.containsKey(username)) {
            double balance = balances.get(username);
            JOptionPane.showMessageDialog(null, "Balance for " + username + ": $" + balance);
        } else {
            JOptionPane.showMessageDialog(null, "No balance found for " + username);
        }
    }                                    

    private void WithrawActionPerformed(java.awt.event.ActionEvent evt) {                                        
       // TODO add your handling code here:
         // Get the amount to withdraw from the user
    String withdrawAmountString = JOptionPane.showInputDialog(null, "Enter amount to withdraw :");
    
    // Check if the user canceled or closed the input dialog
    if (withdrawAmountString == null) {
        return; // Exit the method if the user canceled
    }
    
    // Parse the input string to a double
    double withdrawAmount;
    try {
        withdrawAmount = Double.parseDouble(withdrawAmountString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
        return; // Exit the method if the input is not a valid number
    }
    
    // Check if the withdrawal amount is negative or zero
    if (withdrawAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Withdrawal amount must be a positive number.");
        return; // Exit the method if the withdrawal amount is not positive
    }
    
    // Check if the username exists in the balances HashMap
    if (balances.containsKey(username)) {
        // Get the current balance
        double currentBalance = balances.get(username);
        
        // Check if the withdrawal amount is greater than the current balance
        if (withdrawAmount > currentBalance) {
            JOptionPane.showMessageDialog(null, "Insufficient balance. You cannot withdraw more than your current balance.");
            return; // Exit the method if the withdrawal amount is greater than the current balance
        }
        
        // Subtract the withdrawal amount from the current balance
        double newBalance = currentBalance - withdrawAmount;
        
        // Update the balance in the balances HashMap
        balances.put(username, newBalance);
        
        // Display a message to inform the user about the successful withdrawal
        JOptionPane.showMessageDialog(null, "Withdrawal Completed! Your new balance is: $" + newBalance);
    } else {
        JOptionPane.showMessageDialog(null, "No balance found for " + username);
    }
    }                                       

    private void DepositActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
         // Get the amount to deposit from the user
    String depositAmountString = JOptionPane.showInputDialog(null, "Enter any amount to deposit:");
    
    // Check if the user canceled or closed the input dialog
    if (depositAmountString == null) {
        return; // Exit the method if the user canceled
    }
    // Parse the input string to a double
    double depositAmount;
    try {
        depositAmount = Double.parseDouble(depositAmountString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
        return; // Exit the method if the input is not a valid number
    }
    
    // Check if the deposit amount is negative or zero
    if (depositAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Deposit amount must be a positive number.");
        return; // Exit the method if the deposit amount is not positive
    }
    
    // Check if the username exists in the balances HashMap
    if (balances.containsKey(username)) {
        // Get the current balance
        double currentBalance = balances.get(username);
        
        // Add the deposit amount to the current balance
        double newBalance = currentBalance + depositAmount;
        
        // Update the balance in the balances HashMap
        balances.put(username, newBalance);
        
        // Display a message to inform the user about the successful deposit
        JOptionPane.showMessageDialog(null, "Deposit successful! Your new balance is: $" + newBalance);
    } else {
        JOptionPane.showMessageDialog(null, "No balance found for " + username);
    }
    }                                       

    private void TransferActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        //GEN-FIRST:event_transferfundsActionPerformed
     String accountname;
    do {
    accountname = JOptionPane.showInputDialog(null, " Please Enter the account username:");
    if (accountname == null) {
        return; // Exit the method if the user canceled
    } else if (accountname.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter the account name you want to send the money.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    } while (accountname.isEmpty());
    String transferAmountString = JOptionPane.showInputDialog(null, "Enter amount to send:");

    // Check if the user canceled or closed the input dialog
    if (transferAmountString == null) {
    return; // Exit the method if the user canceled
    }

// Parse the input string to a double
     double transferAmount;
     try {
     transferAmount = Double.parseDouble(transferAmountString);
    } catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Please enter a valid amount.", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method if the input is not a valid number
    }

// Check if the transfer amount is negative or zero
    if (transferAmount <= 0) {
    JOptionPane.showMessageDialog(null, "Transfer amount must be a positive number.");
    return; // Exit the method if the transfer amount is not positive
    }

// Check if the username exists in the balances HashMap
     if (balances.containsKey(username)) {
    // Get the current balance
    double currentBalance = balances.get(username);
    
    // Check if the transfer amount is greater than the current balance
    if (transferAmount > currentBalance) {
        JOptionPane.showMessageDialog(null, "Insufficient Money. You cannot transfer more than your current balance.");
        return; // Exit the method if the transfer amount is greater than the current balance
    }
    
    // Subtract the transfer amount from the current balance
    double newBalance = currentBalance - transferAmount;
    
    // Update the balance in the balances HashMap
    balances.put(username, newBalance);
    
    // Display a message to inform the user about the successful transfer
    JOptionPane.showMessageDialog(null, "Transfer successful! Your new balance is: $" + newBalance);
} else {
    JOptionPane.showMessageDialog(null, "No balance found for " + username);
}
    }                                        

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null,"Are you sure you want to exit?", "Admin",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                JOptionPane.showMessageDialog(null , "De Guzman, Jian, B. ITE 232");
                System.exit(0);
            }
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Deposit;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Transfer;
    private javax.swing.JButton Withraw;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton view;
    // End of variables declaration                   
}
